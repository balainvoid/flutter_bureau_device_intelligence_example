// This file is "main.dart"
import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:flutter_bureau_device_intelligence/BureauConfig.dart';
import 'package:flutter_bureau_device_intelligence/flutter_bureau_device_intelligence.dart';
import 'package:flutter_bureau_device_intelligence/risk_monitoring_callback.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:flutter_bureau_device_intelligence_example/screens/device/data/remote/device_remote_data_source.dart';
import 'package:redux/redux.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:uuid/uuid.dart';

import '../data/remote/models/device_insights_request_model.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'device_redux.freezed.dart';

// optional: Since our Person class is serializable, we must add this line.
// But if Person was not serializable, we could skip it.
//part 'otl_redux.g.dart';

@freezed
class DeviceAppState with _$DeviceAppState {
  const factory DeviceAppState(
      [@Default('') String sessionId,
      @Default('') String userId,
      @Default('') String deviceResult,
      @Default('') String deviceInsights,
      @Default('') String password,
      @Default('') String autocloseMessage]) = _DeviceAppState;
}

sealed class DeviceAction {}

class UpdateUserId extends DeviceAction {
  String userId;

  UpdateUserId({required this.userId});
}

class UpdatePassword extends DeviceAction {
  String password;

  UpdatePassword({required this.password});
}

class UpdateSessionId extends DeviceAction {
  String sessionId;

  UpdateSessionId({required this.sessionId});
}

class UpdateDeviceResult extends DeviceAction {
  String deviceResult;

  UpdateDeviceResult({required this.deviceResult});
}

class UpdateDeviceInsights extends DeviceAction {
  String deviceInsights;

  UpdateDeviceInsights({required this.deviceInsights});
}

class UpdateAutocloseMessage extends DeviceAction {
  String autocloseMessage;

  UpdateAutocloseMessage({required this.autocloseMessage});
}

DeviceAppState _deviceStateReducer(DeviceAppState state, DeviceAction action) {
  switch (action) {
    case UpdateUserId():
      {
        return state.copyWith(userId: action.userId);
      }
    case UpdateSessionId():
      {
        return state.copyWith(sessionId: action.sessionId);
      }
    case UpdateDeviceResult():
      {
        return state.copyWith(deviceResult: action.deviceResult);
      }
    case UpdateDeviceInsights():
      {
        return state.copyWith(deviceInsights: action.deviceInsights);
      }
    case UpdatePassword():
      {
        return state.copyWith(password: action.password);
      }
    case UpdateAutocloseMessage():
      {
        if(action.autocloseMessage == ''){
          return state.copyWith(autocloseMessage: action.autocloseMessage);
        } else {
          return state.copyWith(autocloseMessage: '${state.autocloseMessage}; ${action.autocloseMessage}');
        }
      }
  }
}

DeviceAppState deviceStateReducer(DeviceAppState state, dynamic action) {
  return _deviceStateReducer(state, action);
}

ThunkAction<DeviceAppState> submitDevice() {
  return (Store<DeviceAppState> store) async {
    store.dispatch(UpdateDeviceResult(deviceResult: 'trying...'));
    String sessionId = const Uuid().v1();
    BureauConfig config = BureauConfig(credentialId: '$CRED_ID',eventId: sessionId,environment: Environment.PRODUCTION);
    FlutterBureauDeviceIntelligence.init(config);

    store.dispatch(UpdateAutocloseMessage(autocloseMessage: ''));
    final riskMonitoringCallback = RiskMonitoringCallback(
      onDeveloperModeStatusChanged: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Developer mode status changed: $status'));
        print('Developer mode status changed: $status');
      },
      onADBConnectedStatusChanged: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'ADB enabled status changed: $status'));

        print('ADB enabled status changed: $status');
      },
      onDeviceRootedOrJailBroken: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Device has been rooted: $status'));

        print('Device has been rooted!: $status');
      },
      onBootLoaderUnlocked: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Bootloader has been unlocked: $status'));

        print('Bootloader has been unlocked!: $status');
      },
      onMockGpsStatusChanged: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Mock GPS status changed: $status'));

        print('Mock GPS status changed: $status');
      },
      onPackageDebuggable: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Package is debuggable: $status'));

        print('Package is debuggable!: $status');
      },
      onAppCloningDetected: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'App cloning detected: $status'));

        print('App cloning detected!: $status');
      },
      onVPNStatusChanged: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'VPN status changed: $status'));

        print('VPN status changed: $status');
      },
      onDebuggerStatusChanged: (bool status) {
        store.dispatch(UpdateAutocloseMessage(autocloseMessage: 'Debugger status changed: $status'));

        print('Debugger status changed: $status');
      },
      onHookingStatusChanged: (bool status) {
        store.dispatch( UpdateAutocloseMessage(autocloseMessage: 'Hooking status changed: $status'));

        print('Hooking status changed: $status');
      },
    );
    FlutterBureauDeviceIntelligence.enableRiskMonitoring(riskMonitoringCallback,frequency: 6000);

    FlutterBureauDeviceIntelligence.setMetaInfo({
      "swiggySessionId":"1234"
    });
    store.dispatch(UpdateSessionId(sessionId: sessionId));
    final deviceResult =
        await FlutterBureauDeviceIntelligence.submit(
            store.state.userId);
    store.dispatch(UpdateDeviceResult(deviceResult: deviceResult));

    final deviceRemoteDataSource = DeviceRemoteDataSource();
    final deviceInsightsRequestModel = DeviceInsightsRequestModel(store.state.sessionId);
    final deviceInsights = await deviceRemoteDataSource.getDeviceInsights(
        'Basic $BASIC_AUTH_TOKEN',
        deviceInsightsRequestModel);

    store.dispatch(UpdateDeviceInsights(
        deviceInsights: prettyJson(deviceInsights.response.data)));
    if (kDebugMode) {
      print(deviceInsights.response.statusCode);
      print(deviceInsights.response.data);
    }
  };
}

String prettyJson(dynamic json) {
  var spaces = ' ' * 4;
  var encoder = JsonEncoder.withIndent(spaces);
  return encoder.convert(json);
}
